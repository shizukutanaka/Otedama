version: '3.8'

services:
  otedama-app:
    image: otedama:latest
    container_name: otedama-app
    restart: always
    env_file:
      - ../.env.production
    ports:
      - "127.0.0.1:8080-8084:8080"
    networks:
      - otedama-network
      - redis-network
      - mysql-network
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=otedama-app"

  otedama-ws:
    image: otedama:latest
    container_name: otedama-ws
    restart: always
    env_file:
      - ../.env.production
    command: ["node", "lib/websocket/index.js"]
    ports:
      - "127.0.0.1:8081:8081"
    networks:
      - otedama-network
      - redis-network
    volumes:
      - ../logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=otedama-ws"

  otedama-mining:
    image: otedama:latest
    container_name: otedama-mining
    restart: always
    env_file:
      - ../.env.production
    command: ["node", "lib/mining/unified-mining-pool.js"]
    ports:
      - "3333:3333"
    networks:
      - otedama-network
      - redis-network
      - mysql-network
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=otedama-mining"

  redis:
    image: redis:7-alpine
    container_name: otedama-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - redis-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  mysql:
    image: mysql:8.0
    container_name: otedama-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "127.0.0.1:3306:3306"
    networks:
      - mysql-network
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=1000
      --max_allowed_packet=64M
      --innodb_buffer_pool_size=2G
      --innodb_log_file_size=512M
      --innodb_flush_method=O_DIRECT
      --innodb_file_per_table=1
      --slow_query_log=1
      --long_query_time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "10"

  nginx:
    image: nginx:alpine
    container_name: otedama-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "3333:3333"
    networks:
      - otedama-network
    volumes:
      - ../config/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - nginx-cache:/var/cache/nginx
      - ../logs/nginx:/var/log/nginx
    depends_on:
      - otedama-app
      - otedama-ws
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "10"

  prometheus:
    image: prom/prometheus:latest
    container_name: otedama-prometheus
    restart: always
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - otedama-network
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

networks:
  otedama-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  redis-network:
    driver: bridge
  mysql-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  nginx-cache:
    driver: local
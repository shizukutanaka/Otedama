# Default values for Otedama
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image settings
image:
  repository: ghcr.io/otedama/otedama
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment settings
replicaCount: 3

# Update strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 4
        periodSeconds: 60

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2
  maxUnavailable: null

# Resource settings
resources:
  requests:
    memory: "1Gi"
    cpu: "500m"
  limits:
    memory: "2Gi"
    cpu: "1000m"

# Node selection
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - otedama
        topologyKey: kubernetes.io/hostname

# Service configuration
service:
  type: ClusterIP
  ports:
    http:
      port: 8080
      targetPort: http
      protocol: TCP
    websocket:
      port: 8081
      targetPort: websocket
      protocol: TCP
    p2p:
      port: 8333
      targetPort: p2p
      protocol: TCP
  annotations: {}
  loadBalancerSourceRanges: []

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
  hostname: otedama.example.com
  path: /
  pathType: Prefix
  tls:
    enabled: true
    secretName: otedama-tls
  extraTls: []
  extraHosts: []
  extraPaths: []

# TLS/SSL Certificate Management
certManager:
  enabled: true
  issuer: letsencrypt-prod
  issuerKind: ClusterIssuer

# Environment configuration
env:
  NODE_ENV: production
  LOG_LEVEL: info
  METRICS_ENABLED: "true"
  TELEMETRY_ENABLED: "true"

# Environment variables from secrets/configmaps
envFrom: []

# Extra environment variables
extraEnvVars: []

# Configuration files
config:
  # Application config
  app:
    port: 8080
    cors:
      enabled: true
      origins: ["https://otedama.example.com"]
    rateLimit:
      windowMs: 900000  # 15 minutes
      max: 1000
    compression:
      enabled: true
      level: 6
    security:
      helmet:
        enabled: true
        contentSecurityPolicy: true
        crossOriginEmbedderPolicy: true
      
  # P2P configuration
  p2p:
    port: 8333
    maxPeers: 50
    discovery:
      enabled: true
      bootstrapNodes: []
    nat:
      enabled: true
      upnp: true

  # Mining configuration
  mining:
    stratum:
      enabled: true
      port: 3333
      difficulty: 1024
    fees:
      pool: 1.0
      payout: 0.5

  # DEX configuration
  dex:
    fees:
      trading: 0.3
      withdrawal: 0.1
    orderBook:
      maxOrders: 10000
      priceDecimals: 8

# Persistence
persistence:
  enabled: true
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 20Gi
  annotations: {}
  selector: {}
  dataSource: {}
  existingClaim: ""

# Database configuration
postgresql:
  enabled: true
  auth:
    username: otedama
    database: otedama
    existingSecret: ""
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
  architecture: standalone
  primary:
    persistence:
      enabled: true
      storageClass: ""
      size: 50Gi
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "4Gi"
        cpu: "2000m"

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    existingSecret: ""
    existingSecretPasswordKey: ""
  architecture: standalone
  master:
    persistence:
      enabled: true
      storageClass: ""
      size: 8Gi
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# External database (if postgresql.enabled = false)
externalDatabase:
  host: ""
  port: 5432
  username: otedama
  database: otedama
  existingSecret: ""
  existingSecretPasswordKey: ""

# External Redis (if redis.enabled = false)
externalRedis:
  host: ""
  port: 6379
  username: ""
  existingSecret: ""
  existingSecretPasswordKey: ""

# Monitoring and observability
monitoring:
  enabled: true
  
  # Prometheus metrics
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    serviceMonitor:
      enabled: true
      namespace: ""
      additionalLabels: {}
      annotations: {}
  
  # Grafana dashboards
  grafana:
    enabled: true
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
  
  # Jaeger tracing
  tracing:
    enabled: false
    jaeger:
      endpoint: ""
      serviceName: otedama

# Alerts and notifications
alerts:
  enabled: true
  rules:
    cpu:
      enabled: true
      threshold: 80
    memory:
      enabled: true
      threshold: 85
    errorRate:
      enabled: true
      threshold: 5
    responseTime:
      enabled: true
      threshold: 1000
  
  # Notification channels
  notifications:
    slack:
      enabled: false
      webhook: ""
      channel: "#alerts"
    email:
      enabled: false
      smtp:
        host: ""
        port: 587
        username: ""
        password: ""
      recipients: []

# Health checks
healthCheck:
  enabled: true
  liveness:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
    path: /health
  readiness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    path: /health/ready
  startup:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    path: /health

# Security settings
security:
  enabled: true
  
  # Pod Security Context
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  
  # Container Security Context
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault
  
  # Pod Security Policy
  podSecurityPolicy:
    enabled: false
    create: true
  
  # Network Policy
  networkPolicy:
    enabled: true
    ingress:
      enabled: true
      namespaceSelector: {}
      podSelector: {}
    egress:
      enabled: true
      # Allow DNS
      - to: []
        ports:
        - protocol: UDP
          port: 53
      # Allow external database
      - to: []
        ports:
        - protocol: TCP
          port: 5432
      # Allow external Redis
      - to: []
        ports:
        - protocol: TCP
          port: 6379

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"
  
  # S3 backup
  s3:
    enabled: false
    bucket: ""
    region: ""
    endpoint: ""
    accessKeyId: ""
    secretAccessKey: ""
    existingSecret: ""
  
  # Local backup
  local:
    enabled: true
    path: /backups
    persistence:
      enabled: true
      storageClass: ""
      size: 100Gi

# Migration jobs
migration:
  enabled: true
  image:
    repository: ghcr.io/otedama/otedama
    tag: "latest"
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  restartPolicy: OnFailure
  activeDeadlineSeconds: 600

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Extra volumes
extraVolumes: []

# Extra volume mounts
extraVolumeMounts: []

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

# RBAC
rbac:
  create: true
  rules: []

# Priority Class
priorityClassName: ""

# Pod priority
priority: 0

# Termination grace period
terminationGracePeriodSeconds: 30

# DNS configuration
dnsPolicy: ClusterFirst
dnsConfig: {}

# Host aliases
hostAliases: []

# Topology spread constraints
topologySpreadConstraints: []

# Runtime class
runtimeClassName: ""

# Scheduler name
schedulerName: ""

# Enable/disable service links
enableServiceLinks: false

# Preemption policy
preemptionPolicy: PreemptLowerPriority

# Overhead
overhead: {}

# Test configuration
tests:
  enabled: true
  image:
    repository: ghcr.io/otedama/otedama
    tag: "latest"
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "100m"
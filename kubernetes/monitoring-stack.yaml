apiVersion: v1
kind: Namespace
metadata:
  name: otedama-monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: otedama-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - '/etc/prometheus/rules/*.yml'
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
    
    scrape_configs:
    - job_name: 'otedama-pool'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - otedama
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
    
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: otedama-monitoring
data:
  otedama-alerts.yml: |
    groups:
    - name: otedama_alerts
      interval: 30s
      rules:
      - alert: HighErrorRate
        expr: rate(otedama_errors_total[5m]) > 0.05
        for: 10m
        labels:
          severity: warning
          service: otedama
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} errors per second"
      
      - alert: LowHashrate
        expr: otedama_pool_hashrate < 1000000000000
        for: 15m
        labels:
          severity: critical
          service: otedama
        annotations:
          summary: "Pool hashrate critically low"
          description: "Pool hashrate is {{ $value }} H/s"
      
      - alert: WorkerOffline
        expr: up{job="otedama-pool"} == 0
        for: 5m
        labels:
          severity: warning
          service: otedama
        annotations:
          summary: "Worker offline"
          description: "Worker {{ $labels.instance }} is offline"
      
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes{pod=~"otedama-pool-.*"} / container_spec_memory_limit_bytes) > 0.9
        for: 10m
        labels:
          severity: warning
          service: otedama
        annotations:
          summary: "High memory usage"
          description: "Memory usage is {{ $value | humanizePercentage }} of limit"
      
      - alert: DatabaseConnectionFailure
        expr: otedama_database_connections_active == 0
        for: 5m
        labels:
          severity: critical
          service: otedama
        annotations:
          summary: "Database connection failure"
          description: "No active database connections"
      
      - alert: RedisConnectionFailure
        expr: otedama_redis_connections_active == 0
        for: 5m
        labels:
          severity: critical
          service: otedama
        annotations:
          summary: "Redis connection failure"  
          description: "No active Redis connections"
      
      - alert: HighStratumLatency
        expr: histogram_quantile(0.95, rate(otedama_stratum_request_duration_seconds_bucket[5m])) > 1
        for: 10m
        labels:
          severity: warning
          service: otedama
        annotations:
          summary: "High Stratum latency"
          description: "95th percentile latency is {{ $value }}s"
      
      - alert: ShareRejectionRate
        expr: rate(otedama_shares_rejected_total[5m]) / rate(otedama_shares_submitted_total[5m]) > 0.05
        for: 10m
        labels:
          severity: warning
          service: otedama
        annotations:
          summary: "High share rejection rate"
          description: "Share rejection rate is {{ $value | humanizePercentage }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: otedama-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.retention.time=30d
        - --web.enable-lifecycle
        ports:
        - containerPort: 9090
          name: web
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: rules
          mountPath: /etc/prometheus/rules
        - name: storage
          mountPath: /prometheus
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: rules
        configMap:
          name: prometheus-rules
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: otedama-monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: otedama-monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: otedama-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: otedama-monitoring
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: otedama-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: web
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: dashboards
        configMap:
          name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: otedama-monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: otedama-monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: otedama-monitoring
type: Opaque
stringData:
  admin-password: "your-grafana-admin-password"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: otedama-monitoring
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: otedama-monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: false
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: otedama-monitoring
data:
  otedama-overview.json: |
    {
      "dashboard": {
        "title": "Otedama Mining Pool Overview",
        "panels": [
          {
            "title": "Pool Hashrate",
            "targets": [
              {
                "expr": "otedama_pool_hashrate",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "title": "Active Workers",
            "targets": [
              {
                "expr": "otedama_workers_active",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "title": "Shares Submitted",
            "targets": [
              {
                "expr": "rate(otedama_shares_submitted_total[5m])",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "title": "Share Rejection Rate",
            "targets": [
              {
                "expr": "rate(otedama_shares_rejected_total[5m]) / rate(otedama_shares_submitted_total[5m])",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "refresh": "5s",
        "time": {"from": "now-1h", "to": "now"},
        "uid": "otedama-overview",
        "version": 1
      }
    }
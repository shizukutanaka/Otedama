apiVersion: v1
kind: Namespace
metadata:
  name: otedama
  labels:
    name: otedama
    app: mining-pool

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otedama-config
  namespace: otedama
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  ENABLE_CLUSTERING: "true"
  CACHE_TYPE: "redis"
  DATABASE_TYPE: "postgresql"
  METRICS_ENABLED: "true"
  
---
apiVersion: v1
kind: Secret
metadata:
  name: otedama-secrets
  namespace: otedama
type: Opaque
stringData:
  DATABASE_URL: "postgresql://otedama:password@postgres-service:5432/otedama"
  REDIS_URL: "redis://redis-service:6379"
  JWT_SECRET: "your-jwt-secret-here"
  ENCRYPTION_KEY: "your-encryption-key-here"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otedama-pool
  namespace: otedama
  labels:
    app: otedama-pool
    version: v0.1.7
spec:
  replicas: 3
  selector:
    matchLabels:
      app: otedama-pool
  template:
    metadata:
      labels:
        app: otedama-pool
        version: v0.1.7
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: otedama-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: otedama-pool
        image: otedama/mining-pool:v0.1.7
        imagePullPolicy: IfNotPresent
        ports:
        - name: stratum
          containerPort: 3333
          protocol: TCP
        - name: api
          containerPort: 8080
          protocol: TCP
        - name: websocket
          containerPort: 8081
          protocol: TCP
        - name: p2p
          containerPort: 6633
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: otedama-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: REDIS_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: JWT_SECRET
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: api
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: api
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: otedama-data-pvc
      - name: config
        configMap:
          name: otedama-config

---
apiVersion: v1
kind: Service
metadata:
  name: otedama-stratum-service
  namespace: otedama
  labels:
    app: otedama-pool
spec:
  type: LoadBalancer
  selector:
    app: otedama-pool
  ports:
  - name: stratum
    port: 3333
    targetPort: stratum
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
apiVersion: v1
kind: Service
metadata:
  name: otedama-api-service
  namespace: otedama
  labels:
    app: otedama-pool
spec:
  type: ClusterIP
  selector:
    app: otedama-pool
  ports:
  - name: api
    port: 8080
    targetPort: api
    protocol: TCP
  - name: websocket
    port: 8081
    targetPort: websocket
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: otedama-p2p-service
  namespace: otedama
  labels:
    app: otedama-pool
spec:
  type: NodePort
  selector:
    app: otedama-pool
  ports:
  - name: p2p
    port: 6633
    targetPort: p2p
    protocol: TCP
    nodePort: 30633

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: otedama-pool-hpa
  namespace: otedama
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: otedama-pool
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: active_connections
      target:
        type: AverageValue
        averageValue: "10000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 5
        periodSeconds: 30

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: otedama-data-pvc
  namespace: otedama
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: otedama-pool-pdb
  namespace: otedama
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: otedama-pool

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otedama-service-account
  namespace: otedama

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: otedama-role
  namespace: otedama
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: otedama-rolebinding
  namespace: otedama
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: otedama-role
subjects:
- kind: ServiceAccount
  name: otedama-service-account
  namespace: otedama

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: otedama-network-policy
  namespace: otedama
spec:
  podSelector:
    matchLabels:
      app: otedama-pool
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: otedama
    - podSelector:
        matchLabels:
          app: otedama-pool
    ports:
    - protocol: TCP
      port: 3333
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 6633
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: otedama
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 169.254.169.254/32  # AWS metadata
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
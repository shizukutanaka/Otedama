apiVersion: apps/v1
kind: Deployment
metadata:
  name: otedama
  namespace: otedama
  labels:
    app: otedama
    component: mining-pool
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: otedama
      component: mining-pool
  template:
    metadata:
      labels:
        app: otedama
        component: mining-pool
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        config/checksum: "{{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}"
    spec:
      serviceAccountName: otedama
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        fsGroupChangePolicy: "OnRootMismatch"
      initContainers:
      - name: init-database
        image: postgres:16-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U otedama; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_USER
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      - name: init-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service -p 6379 -a $REDIS_PASSWORD ping; do
            echo "Waiting for Redis to be ready..."
            sleep 2
          done
          echo "Redis is ready!"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: REDIS_PASSWORD
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      containers:
      - name: otedama
        image: otedama:production
        imagePullPolicy: IfNotPresent
        command: ["/app/otedama"]
        args: ["start", "--config", "/etc/otedama/config.yaml"]
        ports:
        - name: api
          containerPort: 8080
          protocol: TCP
        - name: dashboard
          containerPort: 8081
          protocol: TCP
        - name: stratum-sha256
          containerPort: 3333
          protocol: TCP
        - name: stratum-ethash
          containerPort: 3334
          protocol: TCP
        - name: stratum-randomx
          containerPort: 3335
          protocol: TCP
        - name: stratum-scrypt
          containerPort: 3336
          protocol: TCP
        - name: stratum-kawpow
          containerPort: 3337
          protocol: TCP
        - name: p2p
          containerPort: 9333
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: federation
          containerPort: 4444
          protocol: TCP
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: DATABASE_URL
          value: "postgresql://$(DB_USER):$(DB_PASSWORD)@postgres-service:5432/otedama?sslmode=require"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: DB_PASSWORD
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: DB_USER
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: JWT_SECRET
        - name: API_KEY_SALT
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: API_KEY_SALT
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: ENCRYPTION_KEY
        - name: FEDERATION_NODE_ID
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: FEDERATION_NODE_ID
        - name: FEDERATION_SECRET
          valueFrom:
            secretKeyRef:
              name: otedama-secrets
              key: FEDERATION_SECRET
        - name: RUN_MIGRATIONS
          value: "true"
        - name: OTEDAMA_ENV
          value: "production"
        - name: OTEDAMA_LOG_LEVEL
          value: "info"
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "4000m"
            memory: "4Gi"
            ephemeral-storage: "2Gi"
        volumeMounts:
        - name: config
          mountPath: /etc/otedama
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: api
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: api
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - sleep 15
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config
        configMap:
          name: otedama-config
          defaultMode: 0644
      - name: data
        persistentVolumeClaim:
          claimName: otedama-data-pvc
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - otedama
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - mining-pool
      tolerations:
      - key: "mining-pool"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "high-performance"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
version: '3.9'

services:
  # Main Otedama Mining Pool & DEX Platform
  otedama:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: 0.8.0
    image: otedama/otedama:${OTEDAMA_VERSION:-0.8.0}
    container_name: otedama-main
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_PORT=8080
      - STRATUM_PORT=3333
      - P2P_PORT=8333
      - WS_PORT=3334
      - DB_PATH=/data/otedama.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WALLET_ADDRESS=${WALLET_ADDRESS}
      - POOL_NAME=${POOL_NAME:-Otedama Professional Pool}
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      # Mining configuration
      - MINING_ENABLED=${MINING_ENABLED:-true}
      - MINING_ALGORITHM=${MINING_ALGORITHM:-kawpow}
      - MINING_CURRENCY=${MINING_CURRENCY:-RVN}
      # DEX configuration
      - DEX_ENABLED=${DEX_ENABLED:-true}
      - DEX_FEE=${DEX_FEE:-0.003}
      # P2P configuration
      - P2P_ENABLED=${P2P_ENABLED:-true}
      - MAX_PEERS=${MAX_PEERS:-100}
      # Performance optimization
      - ENABLE_QUERY_CACHE=${ENABLE_QUERY_CACHE:-true}
      - ENABLE_MULTI_LAYER_CACHE=${ENABLE_MULTI_LAYER_CACHE:-true}
      - ENABLE_OBJECT_POOLS=${ENABLE_OBJECT_POOLS:-true}
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-otedama}
      - ENABLE_PROMETHEUS_METRICS=${ENABLE_PROMETHEUS_METRICS:-true}
      - METRICS_PORT=9091
    ports:
      - "${API_PORT:-8080}:8080"        # API/Web port
      - "${STRATUM_PORT:-3333}:3333"    # Stratum port
      - "${P2P_PORT:-8333}:8333"        # P2P port
      - "${WS_PORT:-3334}:3334"         # WebSocket port
      - "${API_PORT:-8080}:8080"        # HTTP API port
      - "${METRICS_PORT:-9091}:9091"    # Prometheus metrics port
    volumes:
      - otedama-data:/data
      - otedama-logs:/logs
      - otedama-backups:/backups
      - ./otedama.json:/app/otedama.json:ro
      - ./ssl:/app/ssl:ro
    networks:
      - otedama-network
    healthcheck:
      test: ["CMD-SHELL", "node /app/scripts/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    labels:
      - "com.otedama.service=main"
      - "com.otedama.version=0.8.0"
      # - "traefik.enable=false"  # custom domain disabled
      # # - "traefik.http.routers.otedama.rule=Host(`${DOMAIN:-localhost}`)"  # disabled
      # # - "traefik.http.services.otedama.loadbalancer.server.port=8080"  # disabled

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: otedama-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-otedama}
    volumes:
      - redis-data:/data
    networks:
      - otedama-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for advanced features (optional)
  postgres:
    image: postgres:15-alpine
    container_name: otedama-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=otedama
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-otedama}
      - POSTGRES_DB=otedama
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - otedama-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U otedama"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - full

  # Nginx reverse proxy with SSL
  nginx:
    profiles:
      - domain
    image: nginx:alpine
    container_name: otedama-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-cache:/var/cache/nginx
      - letsencrypt:/etc/letsencrypt:ro
    networks:
      - otedama-network
    depends_on:
      - otedama

  # Certbot for SSL certificates
  certbot:
    profiles:
      - domain
    image: certbot/certbot
    container_name: otedama-certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - ssl

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: otedama-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - otedama-network
    profiles:
      - monitoring

  redis_exporter:
    image: bitnami/redis-exporter:latest
    container_name: otedama-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_EXPORTER_URI=redis://redis:6379
    networks:
      - otedama-network
    depends_on:
      - redis
    ports:
      - "9121:9121"
    profiles:
      - monitoring

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: otedama-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://otedama:${POSTGRES_PASSWORD:-otedama}@postgres:5432/otedama?sslmode=disable
    networks:
      - otedama-network
    depends_on:
      - postgres
    ports:
      - "9187:9187"
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: otedama-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - otedama-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Advanced backup service with our custom scheduler
  backup:
    image: otedama/otedama:${OTEDAMA_VERSION:-0.8.0}
    container_name: otedama-backup
    restart: unless-stopped
    command: node /app/scripts/backup-service.js
    environment:
      - NODE_ENV=production
      - DB_PATH=/data/otedama.db
      - BACKUP_DIR=/backups
      - BACKUP_STRATEGY=${BACKUP_STRATEGY:-adaptive}
      - BACKUP_SCHEDULE_DAILY=${BACKUP_SCHEDULE_DAILY:-0 2 * * *}
      - BACKUP_SCHEDULE_WEEKLY=${BACKUP_SCHEDULE_WEEKLY:-0 3 * * 0}
      - BACKUP_SCHEDULE_MONTHLY=${BACKUP_SCHEDULE_MONTHLY:-0 4 1 * *}
      - RETENTION_DAILY=${RETENTION_DAILY:-7}
      - RETENTION_WEEKLY=${RETENTION_WEEKLY:-4}
      - RETENTION_MONTHLY=${RETENTION_MONTHLY:-6}
      # S3 backup support
      - S3_ENABLED=${S3_ENABLED:-false}
      - AWS_S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - otedama-data:/data:ro
      - otedama-backups:/backups
      - backup-logs:/logs
    networks:
      - otedama-network
    depends_on:
      - otedama
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    profiles:
      - backup

  # Traefik reverse proxy with automatic SSL
  traefik:
    image: traefik:v3.0
    container_name: otedama-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - otedama-network
    labels:
      # - "traefik.enable=false"  # custom domain disabled
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
    profiles:
      - production

  # Mining worker nodes (scalable)
  mining-worker:
    image: otedama/otedama:${OTEDAMA_VERSION:-0.8.0}
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - WORKER_MODE=mining
      - POOL_URL=http://otedama:8080
      - WORKER_NAME=${HOSTNAME}-${WORKER_ID}
      - WORKER_THREADS=${WORKER_THREADS:-4}
      - ALGORITHM=${MINING_ALGORITHM:-kawpow}
    networks:
      - otedama-network
    depends_on:
      - otedama
    deploy:
      mode: replicated
      replicas: ${MINING_WORKERS:-2}
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - mining

  # Load balancer for high availability
  haproxy:
    image: haproxy:alpine
    container_name: otedama-haproxy
    restart: unless-stopped
    ports:
      - "8081:8080"  # Load balanced API
      - "3335:3333"  # Load balanced Stratum
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - otedama-network
    depends_on:
      - otedama
    profiles:
      - ha

networks:
  otedama-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  otedama-data:
    driver: local
  otedama-logs:
    driver: local
  otedama-backups:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local
  letsencrypt:
    driver: local
  backup-logs:
    driver: local
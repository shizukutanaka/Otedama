name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
          ```
          
          ## Installation
          See the [deployment guide](https://github.com/${{ github.repository }}/blob/master/docs/DEPLOYMENT_GUIDE.md) for installation instructions.
        draft: false
        prerelease: false

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: ""
          - os: linux
            arch: arm64
            suffix: ""
          - os: darwin
            arch: amd64
            suffix: ""
          - os: darwin
            arch: arm64
            suffix: ""
          - os: windows
            arch: amd64
            suffix: ".exe"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        LDFLAGS="-s -w -X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.gitCommit=$GITHUB_SHA"
        go build -ldflags "$LDFLAGS" -o otedama-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }} ./cmd/otedama
        tar czf otedama-${{ matrix.os }}-${{ matrix.arch }}.tar.gz otedama-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }} README.md LICENSE

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./otedama-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
        asset_name: otedama-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
        asset_content_type: application/gzip

  build-packages:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm ruby ruby-dev build-essential
        sudo gem install fpm

    - name: Build Linux binary
      env:
        CGO_ENABLED: 0
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        go build -ldflags "-s -w -X main.version=$VERSION" -o otedama ./cmd/otedama

    - name: Create DEB package
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        fpm -s dir -t deb \
          -n otedama \
          -v $VERSION \
          --description "Otedama - P2P Mining Pool Software" \
          --url "https://otedama.io" \
          --maintainer "Otedama Team <support@otedama.io>" \
          --license "MIT" \
          --vendor "Otedama Project" \
          --after-install scripts/post-install.sh \
          --before-remove scripts/pre-remove.sh \
          ./otedama=/usr/bin/otedama \
          ./scripts/otedama.service=/etc/systemd/system/otedama.service \
          ./config.yaml=/etc/otedama/config.yaml

    - name: Create RPM package
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        fpm -s dir -t rpm \
          -n otedama \
          -v $VERSION \
          --description "Otedama - P2P Mining Pool Software" \
          --url "https://otedama.io" \
          --maintainer "Otedama Team <support@otedama.io>" \
          --license "MIT" \
          --vendor "Otedama Project" \
          --after-install scripts/post-install.sh \
          --before-remove scripts/pre-remove.sh \
          ./otedama=/usr/bin/otedama \
          ./scripts/otedama.service=/etc/systemd/system/otedama.service \
          ./config.yaml=/etc/otedama/config.yaml

    - name: Upload DEB package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./otedama_${{ needs.create-release.outputs.version }}_amd64.deb
        asset_name: otedama_${{ needs.create-release.outputs.version }}_amd64.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload RPM package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./otedama-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
        asset_name: otedama-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
        asset_content_type: application/x-rpm

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries]
    steps:
    - name: Update Homebrew formula
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        repository: otedama/homebrew-tap
        commit-message: Update Otedama to ${{ needs.create-release.outputs.version }}
        title: Update Otedama to ${{ needs.create-release.outputs.version }}
        body: |
          Automated update of Otedama formula to version ${{ needs.create-release.outputs.version }}
          
          Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
        branch: update-${{ needs.create-release.outputs.version }}
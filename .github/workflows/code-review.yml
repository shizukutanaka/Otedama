name: Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: code-review-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Automated code review
  review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect Node project
        id: detect
        run: |
          if [ -f package.json ]; then echo "has_node=true" >> $GITHUB_OUTPUT; else echo "has_node=false" >> $GITHUB_OUTPUT; fi
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
          
      - name: Install dependencies
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        run: npm ci
        
      - name: Run ESLint with annotations
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: '--ext .js,.jsx,.ts,.tsx .'
        if: ${{ steps.detect.outputs.has_node == 'true' }}
          
      - name: Check code complexity
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        run: |
          npx complexity-report . --format json > complexity.json || true
          
      - name: Analyze bundle size
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        run: |
          npm run build --if-present
          npx size-limit --json > size-limit.json || true
          
      - name: Generate code review comment
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        run: |
          node scripts/code-review/generate-comment.js \
            --complexity complexity.json \
            --size size-limit.json \
            --out artifact/code-review.md

      - name: Fallback comment when no Node project
        if: ${{ steps.detect.outputs.has_node != 'true' }}
        run: |
          mkdir -p artifact
          printf "## Automated Code Review\n\nNo Node.js project detected.\n" > artifact/code-review.md

      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('artifact/code-review.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: code-review-artifacts
          path: |
            complexity.json
            size-limit.json
            artifact/code-review.md
          if-no-files-found: ignore
          retention-days: 7

  # Check for common issues
  common-issues:
    name: Check Common Issues
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for secrets
        run: |
          # Check for hardcoded secrets
          if grep -rE "(api_key|apikey|password|secret|token)\\s*[:=]\\s*['\"][^'\"]+['\"]" --include="*.js" --include="*.json" --exclude-dir=node_modules --exclude-dir=test .; then
            echo "::error::Potential hardcoded secrets found"
            exit 1
          fi
          
      - name: Check for console.log
        run: |
          # Check for console.log statements
          if grep -rE "console\\.(log|debug|info)" --include="*.js" --exclude-dir=node_modules --exclude-dir=test --exclude-dir=examples .; then
            echo "::warning::console.log statements found"
          fi
          
      - name: Check for TODO comments
        run: |
          # List TODO comments
          echo "### TODO Comments" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          grep -rn "TODO\|FIXME\|HACK" --include="*.js" --exclude-dir=node_modules . >> $GITHUB_STEP_SUMMARY || echo "No TODO comments found" >> $GITHUB_STEP_SUMMARY

  # Dependency review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect Node project
        id: detect_deps
        run: |
          if [ -f package.json ]; then echo "has_node=true" >> $GITHUB_OUTPUT; else echo "has_node=false" >> $GITHUB_OUTPUT; fi

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          
      - name: Check for outdated dependencies
        if: ${{ steps.detect_deps.outputs.has_node == 'true' }}
        run: |
          npm outdated --json > outdated.json || true
          
      - name: Comment outdated dependencies
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
              if (Object.keys(outdated).length > 0) {
                let comment = '### Outdated Dependencies\n\n';
                comment += '| Package | Current | Wanted | Latest |\n';
                comment += '|---------|---------|---------|--------|\n';
                
                Object.entries(outdated).slice(0, 10).forEach(([name, info]) => {
                  comment += `| ${name} | ${info.current} | ${info.wanted} | ${info.latest} |\n`;
                });
                
                if (Object.keys(outdated).length > 10) {
                  comment += `\n_And ${Object.keys(outdated).length - 10} more..._\n`;
                }
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch {}

  # Performance impact check
  performance-check:
    name: Performance Impact
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        
      - name: Detect Node project
        id: detect
        run: |
          if [ -f package.json ]; then echo "has_node=true" >> $GITHUB_OUTPUT; else echo "has_node=false" >> $GITHUB_OUTPUT; fi

      - name: Checkout base
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}
          
      - name: Setup Node.js
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Measure base performance
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        run: |
          npm ci
          npm run test:performance -- --json > base-performance.json || echo '{}' > base-performance.json
          
      - name: Checkout PR again
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        run: |
          git checkout ${{ github.sha }}
          
      - name: Measure PR performance
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        run: |
          npm ci
          npm run test:performance -- --json > pr-performance.json || echo '{}' > pr-performance.json
          
      - name: Compare performance
        if: ${{ steps.detect.outputs.has_node == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const base = JSON.parse(fs.readFileSync('base-performance.json', 'utf8'));
              const pr = JSON.parse(fs.readFileSync('pr-performance.json', 'utf8'));
              
              // Compare and comment if significant changes
              // Implementation depends on performance test output format
            } catch {}
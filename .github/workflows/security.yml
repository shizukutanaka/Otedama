name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
      
      # Static Analysis with gosec
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif -stdout -verbose=text -severity high ./...'
      
      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
      
      # Dependency vulnerability scanning
      - name: Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps ./... | nancy sleuth
      
      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      # Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Secret scanning
      - name: Scan for secrets with Trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
      
      # License compliance
      - name: Check licenses
        run: |
          go install github.com/google/go-licenses@latest
          go-licenses check ./...
      
      # SAST with Semgrep
      - name: Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/golang
            p/owasp-top-ten
          generateSarif: true
      
      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  container-scan:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build container image
        run: docker build -t otedama:${{ github.sha }} .
      
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'otedama:${{ github.sha }}'
          format: 'sarif'
          output: 'container-scan.sarif'
      
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'container-scan.sarif'
      
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'otedama:${{ github.sha }}'
          fail-build: true
          severity-cutoff: high

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
      
      - name: Run security tests
        run: |
          go test -v -tags=security ./tests/security/...
        env:
          SECURITY_TEST: true
      
      - name: Run load tests for DDoS protection
        run: |
          go test -v -tags=load -run TestDDoSProtection ./tests/load/...
        env:
          LOAD_TEST: true

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for sensitive data patterns
        run: |
          # Check for PII patterns
          ! grep -rEn "(ssn|social.?security|credit.?card|\\b\\d{3}-\\d{2}-\\d{4}\\b)" \
            --include="*.go" --include="*.md" --exclude-dir=vendor .
          
          # Check for hardcoded IPs
          ! grep -rEn "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b" \
            --include="*.go" --exclude-dir=vendor --exclude-dir=tests .
      
      - name: Verify security headers
        run: |
          # Check that security middleware is implemented
          grep -r "SecurityHeaders" --include="*.go" . || \
            echo "Warning: No security headers middleware found"
      
      - name: Check authentication implementation
        run: |
          # Verify proper auth is implemented
          grep -r "ValidateToken\|Authenticate\|Authorization" --include="*.go" . || \
            echo "Warning: No authentication implementation found"

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, container-scan, security-tests, compliance-check]
    if: always()
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
      
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          # Add scan summaries
          echo "## Scan Results" >> security-report.md
          echo "- Static Analysis: ${{ needs.security-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> security-report.md
          echo "- Compliance: ${{ needs.compliance-check.result }}" >> security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
      
      - name: Comment PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## ðŸ”’ Security Scan Results
            
            | Check | Status |
            |-------|--------|
            | Static Analysis | ${{ needs.security-scan.result }} |
            | Container Security | ${{ needs.container-scan.result }} |
            | Security Tests | ${{ needs.security-tests.result }} |
            | Compliance | ${{ needs.compliance-check.result }} |
            
            View detailed results in the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
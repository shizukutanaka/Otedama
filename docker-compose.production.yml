version: '3.8'

services:
  # Main Otedama application
  otedama:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: otedama:production
    container_name: otedama_main
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://otedama:${DB_PASSWORD}@postgres:5432/otedama?sslmode=require
      - REDIS_URL=redis://redis:6379/0
      - RUN_MIGRATIONS=true
      - OTEDAMA_ENV=production
      - OTEDAMA_LOG_LEVEL=info
    ports:
      # Stratum ports
      - "3333:3333"  # SHA256
      - "3334:3334"  # Ethash
      - "3335:3335"  # RandomX
      - "3336:3336"  # Scrypt
      - "3337:3337"  # KawPow
      # Federation port
      - "4444:4444"
    volumes:
      - ./config.yaml:/app/config/config.yaml:ro
      - otedama_data:/app/data
      - otedama_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - otedama_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: otedama_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=otedama
      - POSTGRES_USER=otedama
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - otedama_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U otedama"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: otedama_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - otedama_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: otedama_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./web:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - otedama
    networks:
      - otedama_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: otedama_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - otedama_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: otedama_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - prometheus
    networks:
      - otedama_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Backup service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: otedama:production
    container_name: otedama_backup
    restart: unless-stopped
    command: ["backup", "schedule"]
    environment:
      - DATABASE_URL=postgresql://otedama:${DB_PASSWORD}@postgres:5432/otedama?sslmode=require
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
    volumes:
      - ./config.yaml:/app/config/config.yaml:ro
      - backup_data:/app/backup
    depends_on:
      - postgres
    networks:
      - otedama_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

# Networks
networks:
  otedama_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  otedama_data:
    driver: local
  otedama_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: otedama-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: otedama
      POSTGRES_USER: otedama
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-otedama_secure_password}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U otedama"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - otedama-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: otedama-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - otedama-network

  # Otedama Main Application
  otedama:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: otedama-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_MODE=development
      - DATABASE_URL=postgres://otedama:${POSTGRES_PASSWORD:-otedama_secure_password}@postgres:5432/otedama?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
      - STRATUM_PORT=3333
      - API_PORT=8080
      - METRICS_PORT=9090
      - P2P_PORT=4001
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - ./internal:/app/internal:ro  # For hot reload in dev
      - ./cmd:/app/cmd:ro
    ports:
      - "3333:3333"  # Stratum
      - "8080:8080"  # API
      - "9090:9090"  # Metrics
      - "4001:4001"  # P2P
    networks:
      - otedama-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: otedama-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - otedama-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: otedama-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - otedama-network

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: otedama-node-exporter
    restart: unless-stopped
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - otedama-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  otedama-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16